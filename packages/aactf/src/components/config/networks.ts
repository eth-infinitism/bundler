// a JSON array of deployed GSN networks. read paymaster addresses.
// (yarn deploy also reads the forwarder address)
// import gsnDeployedNetworks from './gsn-networks.json'

// generated by "hardhat deploy" in this project
// import ctfNetworks from './ctf-networks.json'

import { networksMetaInfo } from './networksMetaInfo'

import ctfNetworks from './ctf-networks.json'

interface NetworkType {
  name: string
  explorer?: string
  ctf: string
  relayLookupWindowBlocks?: number
  relayRegistrationLookupBlocks?: number
  pastEventsQueryMaxPageSize?: number
}

function getLocalNetwork (): { paymaster: string, ctf: string } | undefined {
  console.warn('No local network support')
  return undefined
}

function getNetworksInfo (networks: string[]): { [chainId: string]: NetworkType } {
  return networks.reduce((set, chainId) => {
    let ctf: string
    if (chainId.match(/1337/) != null) {
      const localnet = getLocalNetwork()
      if (localnet == null) {
        // no local network..
        return set
      }
      ctf = localnet.ctf
    } else {
      ctf = (ctfNetworks as any)[chainId][0].contracts?.CaptureTheFlag.address
      if (ctf == null) {
        throw new Error(`CaptureTheFlag not deployed on ${chainId}`)
      }
    }

    const metaItems = networksMetaInfo[chainId]
    if (metaItems == null) {
      throw new Error(`CTF deployed on ${chainId} but no networksMetaInfo`)
    }
    const { name, explorer } = metaItems
    const networkInfo: NetworkType = {
      name,
      explorer,
      ctf
    }
    return {
      [chainId]: networkInfo,
      ...set
    }
  }, {})
}

// build a list from the CTF deployments.
// make sure we have GSN deployed on that network, too.
const ctfNetworkIds = Object.keys(ctfNetworks)
console.log('ctf networks=', ctfNetworkIds)
export const networks: { [chain: number]: NetworkType } =
  getNetworksInfo(['31337', '1337', ...ctfNetworkIds])

console.log('===exported networks=', networks)
